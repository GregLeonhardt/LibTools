/*******************************  COPYRIGHT  ********************************/
/*
 *  Copyright (c) 2017 Gregory N. Leonhardt All rights reserved.
 *
 ****************************************************************************/

#ifndef SHA1_LIB_H
#define SHA1_LIB_H

/******************************** JAVADOC ***********************************/
/**
 *  This file contains definitions (etc.) that apply to internal library
 *  components of the 'mem' library.
 *
 *  @note
 *
 ****************************************************************************/

/****************************************************************************
 *  Compiler directives
 ****************************************************************************/

#ifdef ALLOC_SHA1
   #define SHA1_EXT
#else
   #define SHA1_EXT             extern
#endif

//  0 = Disabled, 1 = Enabled
#define SHA1HANDSOFF            ( 0 )
#define VERBOSE                 ( 0 )

/****************************************************************************
 * System APIs
 ****************************************************************************/

                                //*******************************************
                                //*******************************************

/****************************************************************************
 * Application APIs
 ****************************************************************************/

                                //*******************************************
                                //*******************************************

/****************************************************************************
 * Library Private Definitions
 ****************************************************************************/

//----------------------------------------------------------------------------
#define rol( value, bits )                              \
        (   ( ( value ) << (        bits )   )          \
          | ( ( value ) >> ( 32 - ( bits ) ) ) )
//----------------------------------------------------------------------------
#ifdef WORDS_BIGENDIAN
    #define blk0( i )  block->l[ i ]
#else
    #define blk0( i )(   block->l[ i ] = ( rol( block->l[ i ], 24 ) & 0xFF00FF00 ) \
                | ( rol( block->l[ i ], 8) &0x00FF00FF ) )
#endif
//----------------------------------------------------------------------------
#define blk( i ) ( block->l[ i & 15 ] = rol( block->l[ ( i + 13 ) & 15 ] ^block->l[ ( i + 8 ) & 15 ] \
    ^block->l[ ( i + 2 ) & 15 ] ^ block->l[ i & 15 ], 1 ) )
//----------------------------------------------------------------------------
//  (R0+R1), R2, R3, R4 are the different operations used in SHA1
#define R0( v, w, x, y, z, i) z += \
    ( ( w & ( x ^ y ) ) ^ y ) + blk0( i ) + 0x5A827999 + rol( v, 5 );   \
    w = rol( w, 30 );
//----------------------------------------------------------------------------
#define R1( v, w, x, y, z, i) z += \
    ( ( w & ( x ^ y ) ) ^ y ) + blk( i ) + 0x5A827999 + rol( v, 5 );    \
    w = rol( w, 30 );
//----------------------------------------------------------------------------
#define R2( v, w, x, y, z, i) z += \
    ( w ^ x ^ y ) + blk( i ) + 0x6ED9EBA1 + rol( v, 5); \
    w = rol( w, 30 );
//----------------------------------------------------------------------------
#define R3( v, w, x, y, z, i) z += \
    ( ( ( w | x ) & y ) | ( w & x ) ) + blk( i ) + 0x8F1BBCDC + rol( v, 5); \
    w = rol( w, 30 );
//----------------------------------------------------------------------------
#define R4( v, w, x, y, z, i) z += \
    ( w ^ x ^ y ) + blk( i ) + 0xCA62C1D6 + rol( v, 5 );    \
    w = rol( w, 30 );
//----------------------------------------------------------------------------

/****************************************************************************
 * Library Private Enumerations
 ****************************************************************************/

//----------------------------------------------------------------------------
//----------------------------------------------------------------------------

/****************************************************************************
 * Library Private Structures
 ****************************************************************************/

//----------------------------------------------------------------------------
//----------------------------------------------------------------------------

/****************************************************************************
 * Library Private Storage Allocation
 ****************************************************************************/

//----------------------------------------------------------------------------
//----------------------------------------------------------------------------

/****************************************************************************
 * Library Private Prototypes
 ****************************************************************************/

//----------------------------------------------------------------------------
void
SHA1__PrintContext(
    SHA1_CTX                    *   context,
    char                        *   msg
    );
//----------------------------------------------------------------------------
void
SHA1__transform(
    uint32_t                        state[ 5 ],
    const   uint8_t                 buffer[ 64 ]
    );
//----------------------------------------------------------------------------

/****************************************************************************/

#endif                      //    SHA1_LIB_H
