/*******************************  COPYRIGHT  ********************************/
/*
 *  Copyright (c) 2017 Gregory N. Leonhardt All rights reserved.
 *
 ****************************************************************************/

#ifndef LIST_LIB_H
#define LIST_LIB_H

/******************************** JAVADOC ***********************************/
/**
 *  This file contains definitions (etc.) that apply to internal library
 *  components of the 'list' library.
 *
 *  @note
 *
 ****************************************************************************/

/****************************************************************************
 *  Compiler directives
 ****************************************************************************/

#ifdef ALLOC_LINKLIST
   #define LIST_EXT
#else
   #define LIST_EXT             extern
#endif

/****************************************************************************
 * System APIs
 ****************************************************************************/

                                //*******************************************
#include <pthread.h>            //  pthread_*( );
                                //*******************************************

/****************************************************************************
 * Application APIs
 ****************************************************************************/

                                //*******************************************
                                //*******************************************

/****************************************************************************
 * Library Private Definitions
 ****************************************************************************/

//----------------------------------------------------------------------------
/**
 *  @param  LL_TAG_VALUE        ASCII 'LIST'                                */
#define LIST_TAG_VALUE              0x4C495354
//----------------------------------------------------------------------------

/****************************************************************************
 * Library Private Enumerations
 ****************************************************************************/

//----------------------------------------------------------------------------
//----------------------------------------------------------------------------

/****************************************************************************
 * Library Private Structures
 ****************************************************************************/

//----------------------------------------------------------------------------
/**
 *  @param  list_bucket_t      The link-list bucket structure  */
struct  list_bucket_t
{
    /**
     *  Pointer to the next link-list bucket.                               */
    struct  list_bucket_t       *   next_p;

    /**
     *  Pointer to the prev link-list bucket.                               */
    struct  list_bucket_t       *   prev_p;

    /**
     *  Pointer to the bucket with the content.                             */
    void                        *   payload_p;
};
//----------------------------------------------------------------------------
/**
 *  @param  list_base_t        The link-list base structure                */
struct  list_base_t
{
    /**
     *  Prevent thread collisions                                           */
    pthread_mutex_t                 access_lock;
    /**
     *  User layer lock/unlock key                                          */
    time_t                          access_key;
    /**
     *  Validation marker for the base pointer.                             */
    int                             tag;
    /**
     *  Pointer to the first link-list bucket.                              */
    struct  list_bucket_t       *   first_p;
    /**
     *  Pointer to the last  link-list bucket.                              */
    struct  list_bucket_t       *   last_p;
    /**
     *  Fast search pointer                                                 */
    struct  list_bucket_t       *   f_key_p;
};
//----------------------------------------------------------------------------

/****************************************************************************
 * Library Private Storage Allocation
 ****************************************************************************/

//----------------------------------------------------------------------------
/**
 *  The process ID of the execution thread that has locked access
 *  to the link list.                                                       */
LIST_EXT
    pid_t                           user_lock;
//----------------------------------------------------------------------------

/****************************************************************************
 * Library Private Prototypes
 ****************************************************************************/

//----------------------------------------------------------------------------
int
LIST__verify(
    struct  list_base_t        *   list_base_p
    );
//----------------------------------------------------------------------------
void    *
LIST__get_first(
    struct  list_base_t         *   list_base_p
    );
//----------------------------------------------------------------------------
void    *
LIST__get_next(
    struct  list_base_t         *   list_base_p,
    void                        *   payload_p
    );
//----------------------------------------------------------------------------
void    *
LIST__get_prev(
    struct  list_base_t         *   list_base_p,
    void                        *   payload_p
    );
//----------------------------------------------------------------------------
void    *
LIST__get_last(
    struct  list_base_t         *   list_base_p
    );
//----------------------------------------------------------------------------
int
LIST__put_first(
    struct  list_base_t         *   list_base_p,
    void                        *   payload_p
    );
//----------------------------------------------------------------------------
int
LIST__put_last(
    struct  list_base_t        *   list_base_p,
    void                        *   payload_p
    );
//----------------------------------------------------------------------------
int
LIST__delete(
    struct  list_base_t         *   list_base_p,
#if 0
    void                        *   payload_p
#else
    struct  list_bucket_t       *   list_bucket_p
#endif
    );
//----------------------------------------------------------------------------

/****************************************************************************/

#endif                      //    LIST_LIB_H
