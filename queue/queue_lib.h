/*******************************  COPYRIGHT  ********************************/
/*
 *  Copyright (c) 2017 Gregory N. Leonhardt All rights reserved.
 *
 ****************************************************************************/

#ifndef QUEUE_LIB_H
#define QUEUE_LIB_H

/******************************** JAVADOC ***********************************/
/**
 *  This file contains definitions (etc.) that apply to internal library
 *  components of the 'queue' library.
 *
 *  @note
 *
 ****************************************************************************/

/****************************************************************************
 *  Compiler directives
 ****************************************************************************/

#ifdef ALLOC_QUEUE
    #define QUEUE_EXT
#else
    #define QUEUE_EXT      extern
#endif

/****************************************************************************
 * System APIs
 ****************************************************************************/

                                //*******************************************
#include <pthread.h>            //  pthread_*( );
                                //*******************************************

/****************************************************************************
 * Application APIs
 ****************************************************************************/

                                //*******************************************
                                //*******************************************

/****************************************************************************
 * Library Private Definitions
 ****************************************************************************/

//----------------------------------------------------------------------------
//----------------------------------------------------------------------------

/****************************************************************************
 * Library Private Enumerations
 ****************************************************************************/

//----------------------------------------------------------------------------
enum    msg_queue_state_e
{
    MSGQSTATE_UNINITIALIZED     =   0,
    MSGQSTATE_IDLE              =   1,
    MSGQSTATE_DEQUEUE_BLOCK     =   2,
    MSGQSTATE_ENQUEUE_BLOCK     =   3
};
//----------------------------------------------------------------------------

/****************************************************************************
 * Library Private Structures
 ****************************************************************************/

//----------------------------------------------------------------------------
struct  queue_cb_t
{
    /**
     *  @param  dequeue_*       DeQueue wait and resume                     */
    pthread_mutex_t                 dequeue_lock;
    pthread_cond_t                  dequeue_signal;
    /**
     *  @param  enqueue_*       EnQueue wait and resume                     */
    pthread_mutex_t                 enqueue_lock;
    pthread_cond_t                  enqueue_signal;

    struct  list_base_t         *   queue_base_p;
    /**
     *  @param  msg_dequeue_state                                           */
    enum    msg_queue_state_e       msg_dequeue_state;
    /**
     *  @param  msg_enqueue_state                                           */
    enum    msg_queue_state_e       msg_enqueue_state;

    struct  queue_state_t           queue_state;
    /**
     *  @param  queue_depth     MAX number of payloads                      */
    int                             queue_depth;
    /**
     *  @param  queue_id        A message Queue-ID number (handle)          */
    int                             queue_id;

    char                            queue_name[ QUEUE_NAME_L + 1 ];
};
//----------------------------------------------------------------------------

/****************************************************************************
 * Library Private Storage Allocation
 ****************************************************************************/

//----------------------------------------------------------------------------
QUEUE_EXT
    struct  list_base_t         *   queue_name_id_base_p;
//----------------------------------------------------------------------------
QUEUE_EXT
    int                             last_used_queue_id;
//----------------------------------------------------------------------------

/****************************************************************************
 * Library Private Prototypes
 ****************************************************************************/

//----------------------------------------------------------------------------
enum queue_rc_e
QUEUE__verify_queue_name(
    char                        *   queue_name_p
    );
//----------------------------------------------------------------------------
int
QUEUE__find_queue_name(
    char                        *   queue_name_p
    );
//----------------------------------------------------------------------------
int
QUEUE__new(
    char                        *   queue_name_p,
    int                             queue_depth
    );
//----------------------------------------------------------------------------
int
QUEUE__get_count(
    int                             queue_id
    );
//----------------------------------------------------------------------------
int
QUEUE__put_payload(
    int                             queue_id,
    void                        *   void_p
    );
//----------------------------------------------------------------------------
void    *
QUEUE__get_payload(
    int                             queue_id
    );
//----------------------------------------------------------------------------

/****************************************************************************/

#endif                      //    QUEUE_LIB_H
